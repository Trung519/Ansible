#!/usr/bin/env python3
"""
Script test k·∫øt n·ªëi ESXi v·ªõi SSL self-signed certificate
"""

from pyVim.connect import SmartConnect, Disconnect
import ssl
import urllib3
import warnings

# T·∫Øt t·∫•t c·∫£ SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
warnings.filterwarnings('ignore', message='Unverified HTTPS request')

# Th√¥ng tin ESXi
ESXI_HOST = "192.168.241.135"
ESXI_USER = "root"
ESXI_PASS = "qtrung@123"
ESXI_PORT = 443

def test_esxi_connection():
    """Test k·∫øt n·ªëi ESXi v·ªõi c√°c ph∆∞∆°ng ph√°p kh√°c nhau"""
    
    print("üîê Test k·∫øt n·ªëi ESXi v·ªõi self-signed SSL certificate")
    print(f"Host: {ESXI_HOST}:{ESXI_PORT}")
    print("=" * 60)
    
    # Ph∆∞∆°ng ph√°p: SSL context + disableSslCertValidation
    print("\n Th·ª≠ k·∫øt n·ªëi v·ªõi SSL context + disableSslCertValidation...")
    try:
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE
        
        si = SmartConnect(
            host=ESXI_HOST,
            user=ESXI_USER,
            pwd=ESXI_PASS,
            port=ESXI_PORT,
            sslContext=context,
            disableSslCertValidation=True
        )
        
        content = si.RetrieveContent()
        print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
        print(f"   ESXi Version: {content.about.version}")
        print(f"   Build: {content.about.build}")
        print(f"   Full Name: {content.about.fullName}")
        
        Disconnect(si)
        return True
        
    except Exception as e:
        print(f"‚ùå Th·∫•t b·∫°i: {e}")

def check_esxi_certificate():
    """Ki·ªÉm tra certificate c·ªßa ESXi"""
    print("\nüîç Ki·ªÉm tra SSL Certificate...")
    
    import socket
    
    try:
        # T·∫°o k·∫øt n·ªëi socket
        sock = socket.create_connection((ESXI_HOST, ESXI_PORT), timeout=10)
        
        # Wrap v·ªõi SSL
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE
        
        with context.wrap_socket(sock, server_hostname=ESXI_HOST) as ssock:
            cert = ssock.getpeercert()
            print(f"‚úÖ SSL handshake th√†nh c√¥ng")
            
            if cert:
                print(f"   Subject: {cert.get('subject', 'N/A')}")
                print(f"   Issuer: {cert.get('issuer', 'N/A')}")
                print(f"   Version: {cert.get('version', 'N/A')}")
            else:
                print("   Certificate info: Kh√¥ng c√≥ (self-signed)")
                
    except Exception as e:
        print(f"‚ùå SSL handshake th·∫•t b·∫°i: {e}")

def main():
    # Test k·∫øt n·ªëi
    success = test_esxi_connection()
    
    # Ki·ªÉm tra certificate
    check_esxi_certificate()
    
    print("\n" + "="*60)
    if success:
        print("üéâ K·∫øt n·ªëi ESXi th√†nh c√¥ng! C√≥ th·ªÉ ch·∫°y script t·∫°o VM.")
    else:
        print("‚ùå T·∫•t c·∫£ ph∆∞∆°ng ph√°p k·∫øt n·ªëi ƒë·ªÅu th·∫•t b·∫°i.")

if __name__ == "__main__":
    main()
